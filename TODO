* long term feature: shared_ptr less locator and resource cache
* custom allocators and EnTT allocator-aware in general (long term feature, I don't actually need it at the moment) - see #22
* debugging tools (#60): the issue online already contains interesting tips on this, look at it
* work stealing job system (see #100) + mt scheduler based on const awareness for types
* meta: sort of meta view based on meta stuff to iterate entities, void * and meta info objects (remove runtime views, welcome reflection)
* allow to replace std:: with custom implementations
* add examples (and credits) from @alanjfs :)
* static reflection, hint: template<> meta_type_t<Type>: meta_descriptor<name, func..., props..., etc...> (see #342)
* update documentation for meta, it contains less than half of the actual feature

* custom pools example:
  - multi instance
  - tables
  - enable/disable component
  - spatial query
  - runtime types pool
  - ...

WIP:
* front/back should assert and crash if invoked for empty views/groups
* make view pack work also with groups, add multi-type iterator (not only input iterators)
* add exclude-only views to combine with packs
* deprecate non-owning groups in favor of owning views and view packs, introduce lazy owning views
* HP: write documentation for custom storages and views!!
* view pack: optimize it and iterate only first min size hint entities
* view pack: plain function as an alias for operator|, reverse iterators, rbegin and rend
* what about using hashed string rather than hash values for meta types?
* pagination doesn't work nicely across boundaries probably, give it a look. RO operations are fine, adding components maybe not.
* make it easier to hook into the type system and describe how to do that to eg auto-generate meta types on first use
* add observer functions aside observer class
* snapshot: support for range-based archives
* update snapshot documentation to describe alternatives
* page size 0 -> page less mode
* add example: 64 bit ids with 32 bits reserved for users' purposes
* add meta dynamic cast (search base for T in parent, we have the meta type already)
* make meta base/conv node work with storage/any and deprecate/remove meta_base, meta_conv, ...
